#!/usr/bin/env python
# -*- coding: utf-8 -*-

from ivod.request import get_json_content
from ivod.request import PresetURL
from ivod.ivod_parser import extract_manifest_from_player_page
from ivod.downloader import download_adobe_hds

import os
import urllib
import urllib2
import json
import cookielib
import sys
import random
import time
import datetime
import subprocess

from optparse import OptionParser


reload(sys)
sys.setdefaultencoding('utf-8')


def main():
    usage = "usage: %prog [options]"
    parser = OptionParser(usage)
    parser.add_option("-s", "--start-date", dest="start_date",
                      help='get video after date, format is %Y-%m-%d')
    parser.add_option("-e", "--end-date", dest="end_date",
                      help='get video before date, format is %Y-%m-%d')
    parser.add_option("-c", "--committee", dest="comit_code",
                      help='parse committee, please input code.')
    parser.add_option("-n", "--no-download",
                      action="store_true", dest="nd", help="don't download resource")
    parser.add_option("-l", "--limit-speed", dest="limit_speed",
                      help='download speed, unit is kb/s', default=0)
    (options, args) = parser.parse_args()
    # print options
    if options.start_date:
        try:
            start_date = datetime.datetime.strptime(
                options.start_date,
                '%Y-%m-%d')
            start_date = start_date.strftime('%Y-%m-%d')
        except ValueError:
            raise ValueError("Incorrect data format, should be YYYY-MM-DD")
    else:
        start_date = None
    if options.end_date:
        try:
            end_date = datetime.datetime.strptime(options.end_date, '%Y-%m-%d')
            end_date = end_date.strftime('%Y-%m-%d')
        except ValueError:
            raise ValueError("Incorrect data format, should be YYYY-MM-DD")
    else:
        end_date = None

    if options.comit_code:
        comit_code = options.comit_code
    else:
        comit_code = None

    from ivod.commands import load_configurations, download_meetings
    config = load_configurations('config.json')
    download_meetings(
        config,
        comit_code,
        start_date,
        end_date,
        options.limit_speed,
        options.nd)


if __name__ == '__main__':
    main()
